# Black and other tool configurations for DeepStack Trainer
[tool.black]
line-length = 120
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
    myenv
    | deepstack-trainer
    | __pycache__
    | \.git
    | wandb
    | train-runs
    | \.pytest_cache
    | \.mypy_cache
    | build
    | dist
    | \.eggs
    | \.venv
)/
'''

[tool.isort]
profile = "black"
line_length = 120
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_glob = [
    "myenv/*",
    "deepstack-trainer/*",
    "__pycache__/*",
    ".git/*",
    "wandb/*",
    "train-runs/*",
    "*.pyc",
    ".pytest_cache/*",
    ".mypy_cache/*",
    "build/*",
    "dist/*",
    "*.egg-info/*"
]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
exclude = [
    "myenv/",
    "deepstack-trainer/",
    "__pycache__/",
    ".git/",
    "wandb/",
    "train-runs/",
    "build/",
    "dist/",
    "*.egg-info/"
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --tb=short --strict-markers"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests"
]

[tool.coverage.run]
source = ["."]
omit = [
    "myenv/*",
    "deepstack-trainer/*",
    "__pycache__/*",
    ".git/*",
    "wandb/*",
    "train-runs/*",
    "tests/*",
    "test_*.py",
    "*_test.py",
    "setup.py",
    "build/*",
    "dist/*",
    "*.egg-info/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
